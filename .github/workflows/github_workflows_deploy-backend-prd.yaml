name: Deploy Backend (Prod)

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  deploy-backend-prd:
    runs-on: [self-hosted, Windows, X64, backend-prod]

    steps:
      ### 1. Git Safe Directory 설정
      - name: Add Safe Directory
        shell: powershell
        run: |
          git config --global --add safe.directory D:/actions_work/netcore/source/backend

      ### 2. 현재 소스 백업
      - name: Backup current source files
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\backend"
          $backupBaseDir = "$baseDir\backup\source\backend"

          # 월별 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # ZIP Archive 생성
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$sourceDir\*" -DestinationPath $backupFile -Force
          Write-Output "✅ Current source files have been backed up to: $backupFile"

      ### 3. 현재 배포 파일 백업
      - name: Backup current deploy files
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $deployDir = "$baseDir\deploy\backend"
          $backupBaseDir = "$baseDir\backup\deploy\backend"

          # 월별 디렉터리 생성
          $currentMonthDir = Join-Path -Path $backupBaseDir -ChildPath (Get-Date -Format 'yyyyMM')
          if (!(Test-Path -Path $currentMonthDir)) {
            New-Item -ItemType Directory -Path $currentMonthDir -Force
          }

          # ZIP Archive 생성
          $currentDateTime = "$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"
          $backupFile = Join-Path -Path $currentMonthDir -ChildPath $currentDateTime
          Compress-Archive -Path "$deployDir\*" -DestinationPath $backupFile -Force
          Write-Output "✅ Deploy files have been backed up to: $backupFile"

      ### 4. 최신 소스 코드 가져오기
      - name: Checkout production repository
        shell: powershell
        run: |
          $repoUrl = 'https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.KTNETCOREACTION }}@github.com/KTNetCoreSolution/backendprod.git'
          $branch = 'main'
          $sourceDir = 'D:\actions_work\netcore\source\backend'

          # 기존 소스 삭제
          if (Test-Path -Path $sourceDir) {
              Remove-Item -Recurse -Force -Path $sourceDir
              Write-Output "✅ Removed existing source directory: $sourceDir"
          }

          # 리포지토리 클론
          git clone --branch $branch $repoUrl $sourceDir
          Write-Output "✅ Production repository checked out to: $sourceDir"

      ### 5. Java 환경 확인
      - name: Verify Java Environment
        shell: powershell
        run: |
          Write-Output "Checking Java version..."
          java -version
          Write-Output "✅ Java environment verified."

      ### 6. 환경 파일(.env.production) 적용
      - name: Apply production .env file
        shell: powershell
        run: |
          $envFile = "D:\actions_work\netcore\source\backend\.env.production"
          $destinationPath = "D:\actions_work\netcore\source\backend\.env"

          # 환경 파일 설정
          if (Test-Path -Path $envFile) {
            if (Test-Path -Path $destinationPath) {
              Remove-Item -Path $destinationPath -Force -ErrorAction SilentlyContinue
            }
            Copy-Item -Path $envFile -Destination $destinationPath -Force
            Write-Output "✅ .env.production applied as .env file."
          } else {
            Write-Output "⚠️ Warning: .env.production not found. Using default environment configuration."

      ### 7. Backend 빌드 작업 실행
      - name: Build backend
        shell: powershell
        run: |
          $buildDir = "D:\actions_work\netcore\source\backend"
          cd $buildDir

          # Gradle 빌드 수행 (테스트 제외)
          gradle clean build -x test
          Write-Output "✅ Backend build completed successfully."

      ### 8. 빌드 결과물 배포 디렉터리로 복사
      - name: Deploy built JAR
        shell: powershell
        run: |
          $baseDir = 'D:\actions_work\netcore'
          $sourceDir = "$baseDir\source\backend\build\libs"
          $deployDir = "$baseDir\deploy\backend"

          # 최신 JAR 파일 검색
          $jarFile = (Get-ChildItem -Path $sourceDir -Filter '*.jar' | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName

          if (!(Test-Path -Path $deployDir)) {
            New-Item -ItemType Directory -Path $deployDir -Force
            Write-Output "✅ Deploy directory created at: $deployDir"
          }

          # JAR 파일 복사
          Copy-Item -Path $jarFile -Destination $deployDir -Force
          Write-Output "✅ Deployment JAR copied to: $deployDir"

      ### 9. 기존 JAR 애플리케이션 종료 및 새 애플리케이션 실행
      - name: Restart deployed application
        shell: powershell
        run: |
          $deployDir = 'D:\actions_work\netcore\deploy\backend'
          $jarFile = Join-Path -Path $deployDir -ChildPath (Get-ChildItem -Path $deployDir -Filter '*.jar' | Sort-Object LastWriteTime -Descending | Select-Object -First 1).Name

          # 기존 실행 중인 애플리케이션 종료
          $process = Get-Process -Name "java" -ErrorAction SilentlyContinue | Where-Object { $_.Path -eq "$deployDir\$jarFile" }
          if ($process) {
            Stop-Process -Id $process.Id -Force
            Write-Output "✅ Stopped existing java process: $process.Id"
          }

          # JAR 실행
          Start-Process -FilePath "java" -ArgumentList "-jar `"$jarFile`"" -WorkingDirectory $deployDir
          Write-Output "✅ Application restarted successfully with JAR at: $jarFile"